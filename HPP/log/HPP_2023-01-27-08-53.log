 INFO 2023-01-27 08:53:03,184 [framework.interceptor.RequestInterceptor.preHandle] ##################################RequestInterceptor 요청 URI: /user/login.do
 INFO 2023-01-27 08:53:03,189 [framework.util.RequestUtil.getIpAddr] > IP Address : 192.168.8.205
 INFO 2023-01-27 08:53:03,884 [sf.log4jdbc.Slf4jSpyLogDelegator.connectionOpened] 2. Connection opened
 INFO 2023-01-27 08:53:03,922 [log4jdbc.tools.Log4JdbcCustomFormatter.sqlOccured] SQL : INSERT 
		  INTO TB_LOG_REQ			/*테이블_요청로그*/
		     (
		       REQ_SEQ				/*요청일련번호*/
		     , USER_ID				/*사용자아이디*/
		     , USER_IP				/*사용자아이피*/
		     , REQ_URI				/*요청경로*/
		     , REQ_PARAM			/*요청파라미터*/
		     , REQ_TYPE_CODE 		/*요청타입코드*/
		     )
		VALUES
			 (
			   (SELECT nextval('REQ_SEQ') FROM DUAL)	/*요청일련번호*/
			 , NULL						/*사용자아이디*/
			 , '192.168.8.205'						/*사용자아이디*/
			 , '/user/login.do'								/*요청경로*/
			 , '{userPw=1, userId=admin}'								/*요청파라미터*/
		     , 'user' 							/*요청타입코드*/
			 )
 INFO 2023-01-27 08:53:03,990 [sf.log4jdbc.Slf4jSpyLogDelegator.sqlTimingOccured] INSERT INTO TB_LOG_REQ /*테이블_요청로그*/ ( REQ_SEQ /*요청일련번호*/ , USER_ID /*사용자아이디*/ , USER_IP /*사용자아이피*/ 
, REQ_URI /*요청경로*/ , REQ_PARAM /*요청파라미터*/ , REQ_TYPE_CODE /*요청타입코드*/ ) VALUES ( (SELECT nextval('REQ_SEQ') 
FROM DUAL) /*요청일련번호*/ , NULL /*사용자아이디*/ , '192.168.8.205' /*사용자아이디*/ , '/user/login.do' /*요청경로*/ 
, '{userPw=1, userId=admin}' /*요청파라미터*/ , 'user' /*요청타입코드*/ )  {executed in 67 msec}
 INFO 2023-01-27 08:53:04,085 [sf.log4jdbc.Slf4jSpyLogDelegator.connectionClosed] 2. Connection closed
 INFO 2023-01-27 08:53:04,797 [sf.log4jdbc.Slf4jSpyLogDelegator.connectionOpened] 3. Connection opened
 INFO 2023-01-27 08:53:04,938 [log4jdbc.tools.Log4JdbcCustomFormatter.sqlOccured] SQL : SELECT USER_ID			/*아이디*/
			 , USER_PW			/*비밀번호*/
			 , PW_ERR_CNT		/*비밀번호 오입력 횟수*/
			 , DATE_FORMAT(PW_CH_DTTI, '%Y%m%d') PW_CH_DTTI	/*비밀번호 최종수정일시*/
		  FROM TB_USER			/*테이블_사용자*/
		 WHERE  USER_ID = 'admin'
 INFO 2023-01-27 08:53:04,997 [sf.log4jdbc.Slf4jSpyLogDelegator.sqlTimingOccured] SELECT USER_ID /*아이디*/ , USER_PW /*비밀번호*/ , PW_ERR_CNT /*비밀번호 오입력 횟수*/ , DATE_FORMAT(PW_CH_DTTI, 
'%Y%m%d') PW_CH_DTTI /*비밀번호 최종수정일시*/ FROM TB_USER /*테이블_사용자*/ WHERE USER_ID = 'admin'  {executed in 59 msec}
 INFO 2023-01-27 08:53:05,042 [log4jdbc.tools.Log4JdbcCustomFormatter.sqlOccured] SQL : SELECT POLI_SEQ				/*정책일련번호*/
			,  POLI_CODE			/*정책분류코드(01:사용자)*/
			,  POLI_NM				/*정책명*/
			,  POLI_VAL				/*정책값*/
			,  POLI_RMRK			/*비고*/
			,  FST_REG_ID			/*최초등록자아이디*/
			,  FST_REG_DTTI			/*최초등록일시*/
			,  LT_UPD_ID			/*최종수정자아이디*/
			,  LT_UPD_DTTI			/*최종수정일시*/
		  FROM TB_POLI				/*테이블_정책*/
		 WHERE  POLI_CODE = '01'
 INFO 2023-01-27 08:53:05,078 [sf.log4jdbc.Slf4jSpyLogDelegator.sqlTimingOccured] SELECT POLI_SEQ /*정책일련번호*/ , POLI_CODE /*정책분류코드(01:사용자)*/ , POLI_NM /*정책명*/ , POLI_VAL /*정책값*/ 
, POLI_RMRK /*비고*/ , FST_REG_ID /*최초등록자아이디*/ , FST_REG_DTTI /*최초등록일시*/ , LT_UPD_ID /*최종수정자아이디*/ 
, LT_UPD_DTTI /*최종수정일시*/ FROM TB_POLI /*테이블_정책*/ WHERE POLI_CODE = '01'  {executed in 36 msec}
 INFO 2023-01-27 08:53:05,111 [framework.util.DateUtil.isBefore] 20230419는 20230127보다 늦거나 같은 날짜입니다.(false)
 INFO 2023-01-27 08:53:05,113 [log4jdbc.tools.Log4JdbcCustomFormatter.sqlOccured] SQL : UPDATE TB_USER
		   SET PW_ERR_CNT 	= 0						/*비밀번호 오입력 횟수*/
		     , LT_UPD_ID 	= 'SYSTEM'				/*최종수정자ID*/
		     , LT_UPD_DTTI	= NOW() 				/*최종수정일시*/		   
		 WHERE USER_ID 		= 'admin'				/*아이디*/
 INFO 2023-01-27 08:53:05,200 [sf.log4jdbc.Slf4jSpyLogDelegator.sqlTimingOccured] UPDATE TB_USER SET PW_ERR_CNT = 0 /*비밀번호 오입력 횟수*/ , LT_UPD_ID = 'SYSTEM' /*최종수정자ID*/ , LT_UPD_DTTI 
= NOW() /*최종수정일시*/ WHERE USER_ID = 'admin' /*아이디*/  {executed in 87 msec}
 INFO 2023-01-27 08:53:05,201 [framework.util.RequestUtil.getIpAddr] > IP Address : 192.168.8.205
 INFO 2023-01-27 08:53:05,202 [log4jdbc.tools.Log4JdbcCustomFormatter.sqlOccured] SQL : SELECT T4.MNU_URL					/*메뉴경로*/
			 , MAX(T2.AUTH_CODE) AUTH_CODE	/*권한코드(01:읽기, 02:읽기/쓰기, 03:기타권한1, 04:기타권한2 ...)*/
		  FROM TB_USER_ROLE_MAP T1			/*테이블_사용자_권한그룹_매핑*/
		  JOIN TB_AUTH T2					/*테이블_권한*/
		    ON T1.ROLE_SEQ = T2.ROLE_SEQ
		  JOIN TB_MNU T4					/*테이블_메뉴*/
		    ON T2.MNU_SEQ = T4.MNU_SEQ  		    
		 WHERE T4.MNU_LEVEL = 2				/*메뉴레벨*/
		   AND T1.USER_ID = 'admin'		/*사용자아이디*/
		 GROUP BY T4.MNU_URL
 INFO 2023-01-27 08:53:05,243 [sf.log4jdbc.Slf4jSpyLogDelegator.sqlTimingOccured] SELECT T4.MNU_URL /*메뉴경로*/ , MAX(T2.AUTH_CODE) AUTH_CODE /*권한코드(01:읽기, 02:읽기/쓰기, 03:기타권한1, 
04:기타권한2 ...)*/ FROM TB_USER_ROLE_MAP T1 /*테이블_사용자_권한그룹_매핑*/ JOIN TB_AUTH T2 /*테이블_권한*/ ON 
T1.ROLE_SEQ = T2.ROLE_SEQ JOIN TB_MNU T4 /*테이블_메뉴*/ ON T2.MNU_SEQ = T4.MNU_SEQ WHERE T4.MNU_LEVEL 
= 2 /*메뉴레벨*/ AND T1.USER_ID = 'admin' /*사용자아이디*/ GROUP BY T4.MNU_URL  {executed in 40 msec}
 INFO 2023-01-27 08:53:05,248 [log4jdbc.tools.Log4JdbcCustomFormatter.sqlOccured] SQL : INSERT 
		  INTO TB_LOG_LOGIN			/*테이블_로그_로그인*/
		     ( LOGIN_SEQ			/*로그인일련번호*/
		     , USER_ID 				/*사용자_아이디*/
		     , USER_IP 				/*사용자_아이피*/
		     , LOGIN_CODE 			/*로그인_코드(01:로그인, 02:로그아웃, 03:존재하지 않는 사용자, 04: 잘못된 비밀번호, 05: 비밀번호 오입력 횟수 초과)*/
		     )
		VALUES
			 ( (SELECT nextval('LOGIN_SEQ') FROM DUAL)		/*로그인일련번호*/
			 , 'admin'			/*사용자_아이디*/
		     , '192.168.8.205'			/*사용자_아이피*/
		     , '01' 		/*로그인_코드(01:로그인, 02:로그아웃, 03:존재하지 않는 사용자, 04: 잘못된 비밀번호, 05: 비밀번호 오입력 횟수 초과)*/		 
			 )
 INFO 2023-01-27 08:53:05,312 [sf.log4jdbc.Slf4jSpyLogDelegator.sqlTimingOccured] INSERT INTO TB_LOG_LOGIN /*테이블_로그_로그인*/ ( LOGIN_SEQ /*로그인일련번호*/ , USER_ID /*사용자_아이디*/ , USER_IP 
/*사용자_아이피*/ , LOGIN_CODE /*로그인_코드(01:로그인, 02:로그아웃, 03:존재하지 않는 사용자, 04: 잘못된 비밀번호, 05: 비밀번호 오입력 
횟수 초과)*/ ) VALUES ( (SELECT nextval('LOGIN_SEQ') FROM DUAL) /*로그인일련번호*/ , 'admin' /*사용자_아이디*/ 
, '192.168.8.205' /*사용자_아이피*/ , '01' /*로그인_코드(01:로그인, 02:로그아웃, 03:존재하지 않는 사용자, 04: 잘못된 비밀번호, 
05: 비밀번호 오입력 횟수 초과)*/ )  {executed in 64 msec}
 INFO 2023-01-27 08:53:05,428 [sf.log4jdbc.Slf4jSpyLogDelegator.connectionClosed] 3. Connection closed
 INFO 2023-01-27 08:53:05,440 [framework.aop.ControllerAdvice.around] 요청 처리시간: 1355
 INFO 2023-01-27 08:53:05,441 [framework.aop.ControllerAdvice.around] user.UserController.login(HttpServletRequest,HttpServletResponse)/0:0:0:0:0:0:0:1/{"userId":"admin"}
 INFO 2023-01-27 08:53:05,464 [framework.interceptor.RequestInterceptor.preHandle] ##################################RequestInterceptor 요청 URI: /info/notice
 INFO 2023-01-27 08:53:05,806 [sf.log4jdbc.Slf4jSpyLogDelegator.connectionOpened] 4. Connection opened
 INFO 2023-01-27 08:53:05,850 [log4jdbc.tools.Log4JdbcCustomFormatter.sqlOccured] SQL : INSERT 
		  INTO TB_LOG_REQ			/*테이블_요청로그*/
		     (
		       REQ_SEQ				/*요청일련번호*/
		     , USER_ID				/*사용자아이디*/
		     , USER_IP				/*사용자아이피*/
		     , REQ_URI				/*요청경로*/
		     , REQ_PARAM			/*요청파라미터*/
		     , REQ_TYPE_CODE 		/*요청타입코드*/
		     )
		VALUES
			 (
			   (SELECT nextval('REQ_SEQ') FROM DUAL)	/*요청일련번호*/
			 , 'admin'						/*사용자아이디*/
			 , '192.168.8.205'						/*사용자아이디*/
			 , '/info/notice'								/*요청경로*/
			 , '{}'								/*요청파라미터*/
		     , 'info' 							/*요청타입코드*/
			 )
 INFO 2023-01-27 08:53:05,934 [sf.log4jdbc.Slf4jSpyLogDelegator.sqlTimingOccured] INSERT INTO TB_LOG_REQ /*테이블_요청로그*/ ( REQ_SEQ /*요청일련번호*/ , USER_ID /*사용자아이디*/ , USER_IP /*사용자아이피*/ 
, REQ_URI /*요청경로*/ , REQ_PARAM /*요청파라미터*/ , REQ_TYPE_CODE /*요청타입코드*/ ) VALUES ( (SELECT nextval('REQ_SEQ') 
FROM DUAL) /*요청일련번호*/ , 'admin' /*사용자아이디*/ , '192.168.8.205' /*사용자아이디*/ , '/info/notice' /*요청경로*/ 
, '{}' /*요청파라미터*/ , 'info' /*요청타입코드*/ )  {executed in 83 msec}
 INFO 2023-01-27 08:53:06,025 [sf.log4jdbc.Slf4jSpyLogDelegator.connectionClosed] 4. Connection closed
 INFO 2023-01-27 08:53:06,425 [sf.log4jdbc.Slf4jSpyLogDelegator.connectionOpened] 5. Connection opened
 INFO 2023-01-27 08:53:06,546 [sf.log4jdbc.Slf4jSpyLogDelegator.connectionClosed] 5. Connection closed
 INFO 2023-01-27 08:53:06,985 [sf.log4jdbc.Slf4jSpyLogDelegator.connectionOpened] 6. Connection opened
 INFO 2023-01-27 08:53:07,018 [log4jdbc.tools.Log4JdbcCustomFormatter.sqlOccured] SQL : SELECT T2.MNU_NM AS MNU_UPPER_NM				/*상위메뉴명*/
			,  T1.MNU_NM						/*메뉴명*/
			,  T1.MNU_INFO						/*메뉴정보*/
			,  T1.MNU_URL						/*메뉴경로*/
			,  T1.MNU_TOP_URL					/*최상위메뉴경로*/
		  FROM TB_MNU T1						/*테이블_메뉴*/
		  JOIN TB_MNU T2						/*테이블_메뉴*/
		    ON T1.MNU_UPPER_URL = T2.MNU_URL
		 WHERE T1.MNU_URL LIKE CONCAT('info/notice','%')
 INFO 2023-01-27 08:53:07,066 [sf.log4jdbc.Slf4jSpyLogDelegator.sqlTimingOccured] SELECT T2.MNU_NM AS MNU_UPPER_NM /*상위메뉴명*/ , T1.MNU_NM /*메뉴명*/ , T1.MNU_INFO /*메뉴정보*/ , T1.MNU_URL 
/*메뉴경로*/ , T1.MNU_TOP_URL /*최상위메뉴경로*/ FROM TB_MNU T1 /*테이블_메뉴*/ JOIN TB_MNU T2 /*테이블_메뉴*/ ON 
T1.MNU_UPPER_URL = T2.MNU_URL WHERE T1.MNU_URL LIKE CONCAT('info/notice','%')  {executed in 47 msec}
 INFO 2023-01-27 08:53:07,138 [sf.log4jdbc.Slf4jSpyLogDelegator.connectionClosed] 6. Connection closed
 INFO 2023-01-27 08:53:07,139 [framework.aop.ControllerAdvice.around] 요청 처리시간: 1113
 INFO 2023-01-27 08:53:07,139 [framework.aop.ControllerAdvice.around] com.PageController.pageController(HttpServletRequest,HttpServletResponse,String,String)/0:0:0:0:0:0:0:1/{}
 INFO 2023-01-27 08:53:07,647 [framework.interceptor.RequestInterceptor.preHandle] ##################################RequestInterceptor 요청 URI: /notice/selectNotice.do
 INFO 2023-01-27 08:53:08,006 [sf.log4jdbc.Slf4jSpyLogDelegator.connectionOpened] 7. Connection opened
 INFO 2023-01-27 08:53:08,056 [log4jdbc.tools.Log4JdbcCustomFormatter.sqlOccured] SQL : INSERT 
		  INTO TB_LOG_REQ			/*테이블_요청로그*/
		     (
		       REQ_SEQ				/*요청일련번호*/
		     , USER_ID				/*사용자아이디*/
		     , USER_IP				/*사용자아이피*/
		     , REQ_URI				/*요청경로*/
		     , REQ_PARAM			/*요청파라미터*/
		     , REQ_TYPE_CODE 		/*요청타입코드*/
		     )
		VALUES
			 (
			   (SELECT nextval('REQ_SEQ') FROM DUAL)	/*요청일련번호*/
			 , 'admin'						/*사용자아이디*/
			 , '192.168.8.205'						/*사용자아이디*/
			 , '/notice/selectNotice.do'								/*요청경로*/
			 , '{}'								/*요청파라미터*/
		     , 'notice' 							/*요청타입코드*/
			 )
 INFO 2023-01-27 08:53:08,206 [sf.log4jdbc.Slf4jSpyLogDelegator.sqlTimingOccured] INSERT INTO TB_LOG_REQ /*테이블_요청로그*/ ( REQ_SEQ /*요청일련번호*/ , USER_ID /*사용자아이디*/ , USER_IP /*사용자아이피*/ 
, REQ_URI /*요청경로*/ , REQ_PARAM /*요청파라미터*/ , REQ_TYPE_CODE /*요청타입코드*/ ) VALUES ( (SELECT nextval('REQ_SEQ') 
FROM DUAL) /*요청일련번호*/ , 'admin' /*사용자아이디*/ , '192.168.8.205' /*사용자아이디*/ , '/notice/selectNotice.do' 
/*요청경로*/ , '{}' /*요청파라미터*/ , 'notice' /*요청타입코드*/ )  {executed in 150 msec}
 INFO 2023-01-27 08:53:08,285 [sf.log4jdbc.Slf4jSpyLogDelegator.connectionClosed] 7. Connection closed
 INFO 2023-01-27 08:53:08,893 [sf.log4jdbc.Slf4jSpyLogDelegator.connectionOpened] 8. Connection opened
 INFO 2023-01-27 08:53:08,922 [log4jdbc.tools.Log4JdbcCustomFormatter.sqlOccured] SQL : SELECT BOARD_SEQ				/*게시글일련번호*/
		     , NOTICE_TITLE 			/*공지사항제목*/
		     , NOTICE_CN				/*공지사항내용*/
		     , NOTICE_STR_DT			/*공지사항게시시작일*/
		     , NOTICE_END_DT			/*공지사항게시종료일*/
		     , NOTICE_POP_YN			/*공지사항팝업여부*/
		     , NOTICE_CN				/*공지사항내용*/
		     , NOTICE_HIT				/*공지사항조회수*/
		     , FST_REG_ID 				/*최초등록자ID*/
		     , DATE_FORMAT(FST_REG_DTTI, "%Y/%m/%d %H:%i") FST_REG_DTTI	/*최초등록일시*/
		     , LT_UPD_ID 				/*최종수정자ID*/
		     , DATE_FORMAT(LT_UPD_DTTI, "%Y/%m/%d %H:%i") LT_UPD_DTTI	/*최종수정일시*/
		  FROM TB_BOARD_NOTICE			/*테이블_공지사항*/
		 ORDER BY NOTICE_STR_DT DESC;
 INFO 2023-01-27 08:53:09,063 [sf.log4jdbc.Slf4jSpyLogDelegator.sqlTimingOccured] SELECT BOARD_SEQ /*게시글일련번호*/ , NOTICE_TITLE /*공지사항제목*/ , NOTICE_CN /*공지사항내용*/ , NOTICE_STR_DT 
/*공지사항게시시작일*/ , NOTICE_END_DT /*공지사항게시종료일*/ , NOTICE_POP_YN /*공지사항팝업여부*/ , NOTICE_CN /*공지사항내용*/ 
, NOTICE_HIT /*공지사항조회수*/ , FST_REG_ID /*최초등록자ID*/ , DATE_FORMAT(FST_REG_DTTI, "%Y/%m/%d %H:%i") 
FST_REG_DTTI /*최초등록일시*/ , LT_UPD_ID /*최종수정자ID*/ , DATE_FORMAT(LT_UPD_DTTI, "%Y/%m/%d %H:%i") 
LT_UPD_DTTI /*최종수정일시*/ FROM TB_BOARD_NOTICE /*테이블_공지사항*/ ORDER BY NOTICE_STR_DT DESC;  {executed in 141 msec}
 INFO 2023-01-27 08:53:09,132 [sf.log4jdbc.Slf4jSpyLogDelegator.connectionClosed] 8. Connection closed
 INFO 2023-01-27 08:53:09,134 [framework.aop.ControllerAdvice.around] 요청 처리시간: 847
 INFO 2023-01-27 08:53:09,134 [framework.aop.ControllerAdvice.around] info.NoticeController.selectNotice(HttpServletRequest,HttpServletResponse)/0:0:0:0:0:0:0:1/{}
 INFO 2023-01-27 08:53:57,596 [tiles.access.TilesAccess.setContainer] Removing TilesContext for context: org.springframework.web.servlet.view.tiles3.SpringWildcardServletTilesApplicationContext
